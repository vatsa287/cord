[package]
name = 'cord-node-cli'
description = "Generic CORD node implementation in Rust."
version.workspace = true
authors.workspace = true
edition.workspace = true
license.workspace = true
homepage.workspace = true
repository.workspace = true

[lints]
workspace = true

[package.metadata.wasm-pack.profile.release]
# `wasm-opt` has some problems on Linux, see
# https://github.com/rustwasm/wasm-pack/issues/781 etc.
wasm-opt = false

[[bin]]
name = "cord"
path = "bin/main.rs"
required-features = ["cli"]

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
# third-party dependencies
array-bytes = { workspace = true }
clap = { features = ["derive"], optional = true, workspace = true }
codec = { workspace = true }
serde = { features = ["derive"], workspace = true, default-features = true }
serde_json = { workspace = true, default-features = true }
jsonrpsee = { features = ["server"], workspace = true }
futures = { workspace = true }
log = { workspace = true, default-features = true }
hex = { workspace = true }
toml = { workspace = true }
kvdb = { workspace = true }
kvdb-rocksdb = { workspace = true, optional = true, default-features = true }
parity-db = { workspace = true, optional = true }
bitvec = { workspace = true, optional = true }
thiserror = { workspace = true }
tikv-jemallocator = { workspace = true, optional = true, features = [
	"unprefixed_malloc_on_supported_platforms",
] }

# Substrate primitives
sp-authority-discovery = { features = ["std"], workspace = true }
sp-consensus = { workspace = true }
sp-consensus-babe = { features = ["std"], workspace = true }
sp-consensus-grandpa = { features = ["std"], workspace = true }
sp-inherents = { features = ["std"], workspace = true }
sp-api = { features = ["std"], workspace = true }
sp-block-builder = { features = ["std"], workspace = true }
sp-blockchain = { workspace = true }
sp-core = { features = ["std"], workspace = true }
sp-io = { features = ["std"], workspace = true }
sp-keystore = { features = ["std"], workspace = true }
sp-offchain = { features = ["std"], workspace = true }
sp-runtime = { features = ["std"], workspace = true }
sp-session = { features = ["std"], workspace = true }
sp-storage = { features = ["std"], workspace = true }
sp-transaction-pool = { features = ["std"], workspace = true }
sp-timestamp = { features = ["std"], workspace = true }
sp-state-machine = { features = ["std"], workspace = true }
sp-weights = { features = ["std"], workspace = true }
sp-genesis-builder = { features = ["std"], workspace = true }
sp-version = { features = ["std"], workspace = true }
sp-transaction-storage-proof = { features = ["std"], workspace = true }
sp-keyring = { features = ["std"], workspace = true }
sp-std = { features = ["std"], workspace = true }
sp-maybe-compressed-blob = { workspace = true }

# Substrate Client dependencies
sc-authority-discovery = { workspace = true }
sc-consensus = { workspace = true }
sc-consensus-slots = { workspace = true }
sc-consensus-babe = { workspace = true }
sc-consensus-grandpa = { workspace = true }
sc-block-builder = { workspace = true }
sc-chain-spec = { workspace = true }
sc-client-api = { workspace = true }
sc-client-db = { workspace = true }
sc-executor = { workspace = true }
sc-network = { workspace = true }
sc-network-common = { workspace = true }
sc-network-sync = { workspace = true }
sc-transaction-pool = { workspace = true }
sc-transaction-pool-api = { workspace = true }
sc-sync-state-rpc = { workspace = true }
sc-keystore = { workspace = true }
sc-basic-authorship = { workspace = true }
sc-offchain = { workspace = true }
sc-sysinfo = { workspace = true }
sc-service = { workspace = true }
sc-telemetry = { workspace = true }
sc-storage-monitor = { workspace = true }
sc-rpc = { workspace = true }

# frame dependencies
frame-benchmarking = { features = ["std"], workspace = true }
frame-system = { features = ["std"], workspace = true }
frame-support = { features = ["std"], workspace = true }
frame-system-rpc-runtime-api = { features = ["std"], workspace = true }
pallet-babe = { features = ["std"], workspace = true }
pallet-im-online = { features = ["std"], workspace = true }
pallet-transaction-payment = { workspace = true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true }
pallet-contracts = { features = ["std"], workspace = true }
pallet-did-runtime-api = { features = ["std"], workspace = true }
pallet-transaction-weight-runtime-api = { features = ["std"], workspace = true }
pallet-assets-runtime-api = { features = ["std"], workspace = true }
pallet-asset-conversion = { features = ["std"], workspace = true }
substrate-prometheus-endpoint = { workspace = true }

# cord-specific dependencies
cord-braid-runtime = { workspace = true, features = ["std"], optional = true }
cord-loom-runtime = { workspace = true, features = ["std"], optional = true }
cord-weave-runtime = { workspace = true, features = ["std"], optional = true }
cord-runtime-common = { workspace = true }
cord-primitives = { features = ["std"], workspace = true }
network-membership = { features = ["std"], workspace = true }
cord-node-inspect = { workspace = true }
cord-node-rpc = { workspace = true }
cord-braid-runtime-constants = { features = [
	"std",
], workspace = true, optional = true }
cord-loom-runtime-constants = { features = [
	"std",
], workspace = true, optional = true }
cord-weave-runtime-constants = { features = [
	"std",
], workspace = true, optional = true }
pallet-config = { features = ["std"], workspace = true }
pallet-network-membership = { features = ["std"], workspace = true }
pallet-blacklist-members = { features = ["std"], workspace = true }

# CLI-specific dependencies
sc-cli = { workspace = true, optional = true }
frame-benchmarking-cli = { workspace = true }

[target.'cfg(target_os = "linux")'.dependencies]
tikv-jemallocator = { workspace = true, features = [
	"unprefixed_malloc_on_supported_platforms",
] }

[dev-dependencies]
env_logger = { workspace = true }
assert_matches = { workspace = true }
serial_test = { workspace = true }
tempfile = { workspace = true }
sc-keystore = { workspace = true }
sc-client-db = { workspace = true }
sc-consensus = { workspace = true }
sc-consensus-babe = { workspace = true }
sc-consensus-epochs = { workspace = true }
cord-service-test = { workspace = true }
sp-tracing = { workspace = true }
sp-blockchain = { workspace = true }
sp-crypto-hashing = { workspace = true }
futures = { workspace = true }
assert_cmd = { workspace = true }
nix = { features = ["signal"], workspace = true }
regex = { workspace = true }
soketto = { workspace = true }
tokio = { features = ["macros", "parking_lot", "time"], workspace = true }
tokio-util = { features = ["compat"], workspace = true }
cord-cli-test-utils = { workspace = true }
frame-support = { workspace = true }
cord-node-testing = { workspace = true }
pallet-balances = { workspace = true }
sp-application-crypto = { workspace = true }
pallet-root-testing = { workspace = true }
pallet-transaction-payment = { workspace = true }
pallet-timestamp = { workspace = true }
pallet-sudo = { workspace = true }
sp-consensus-babe = { workspace = true }
sp-externalities = { workspace = true }
sp-keyring = { workspace = true }
sp-runtime = { workspace = true }
serde_json = { workspace = true }
scale-info = { features = ["derive", "serde"], workspace = true }
sp-trie = { workspace = true }
sp-state-machine = { workspace = true }

[build-dependencies]
clap = { workspace = true, optional = true }
clap_complete = { workspace = true, optional = true }
cord-node-inspect = { workspace = true, optional = true }
frame-benchmarking-cli = { workspace = true, optional = true }
substrate-build-script-utils = { workspace = true, optional = true }
pallet-balances = { workspace = true }
sc-storage-monitor = { workspace = true }

[features]
default = [
	"cli",
	"db",
	"full-node",
	"braid-native",
	"loom-native",
	"weave-native",
]

full-node = ["parity-db"]

cli = [
	"cord-node-inspect",
	"sc-cli",
	"frame-benchmarking-cli",
	"sc-service/rocksdb",
	"clap",
	"clap_complete",
	"substrate-build-script-utils",
]

db = [
	"sc-service/rocksdb",
	"sc-client-db/rocksdb",
	"frame-benchmarking-cli/rocksdb",
	"kvdb-rocksdb",
]

# Configure the native runtimes to use.
braid-native = ["bitvec", "cord-braid-runtime", "cord-braid-runtime-constants"]
loom-native = ["bitvec", "cord-loom-runtime", "cord-loom-runtime-constants"]
weave-native = ["bitvec", "cord-weave-runtime", "cord-weave-runtime-constants"]

runtime-benchmarks = [
	"cord-loom-runtime/runtime-benchmarks",
	"frame-benchmarking-cli/runtime-benchmarks",
	"frame-benchmarking/runtime-benchmarks",
	"frame-support/runtime-benchmarks",
	"frame-system/runtime-benchmarks",
	"cord-node-inspect?/runtime-benchmarks",
	"pallet-balances/runtime-benchmarks",
	"pallet-im-online/runtime-benchmarks",
	"sc-service/runtime-benchmarks",
	"sp-runtime/runtime-benchmarks",
	"cord-braid-runtime?/runtime-benchmarks",
	"cord-runtime-common/runtime-benchmarks",
	"cord-weave-runtime?/runtime-benchmarks",
	"pallet-asset-conversion/runtime-benchmarks",
	"pallet-babe/runtime-benchmarks",
	"pallet-config/runtime-benchmarks",
	"pallet-contracts/runtime-benchmarks",
	"pallet-network-membership/runtime-benchmarks",
	"sc-client-db/runtime-benchmarks",
]
# Enable features that allow the runtime to be tried and debugged.
try-runtime = [
	"frame-support/try-runtime",
	"frame-system/try-runtime",
	"cord-loom-runtime/try-runtime",
	"pallet-balances/try-runtime",
	"pallet-im-online/try-runtime",
	"pallet-root-testing/try-runtime",
	"pallet-transaction-payment/try-runtime",
	"sp-runtime/try-runtime",
	"cord-cli-test-utils/try-runtime",
	"cord-braid-runtime?/try-runtime",
	"cord-runtime-common/try-runtime",
	"cord-weave-runtime?/try-runtime",
	"pallet-asset-conversion/try-runtime",
	"pallet-babe/try-runtime",
	"pallet-config/try-runtime",
	"pallet-contracts/try-runtime",
	"pallet-network-membership/try-runtime",
]
